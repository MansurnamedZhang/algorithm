#############################题目######################################
给定两个以升序排列的整数数组 nums1 和 nums2 , 以及一个整数 k 。

定义一对值 (u,v)，其中第一个元素来自 nums1，第二个元素来自 nums2 。

请找到和最小的 k 个数对 (u1,v1),  (u2,v2)  ...  (uk,vk) 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

##############################答题#####################################
===============================C======================================
typedef struct Node{
    int num1;
    int num2;
    int total;
}Node;

int Cmp(const void *a, const void *b)
{
    Node x = *(Node*)a;
    Node y = *(Node*)b;
    return x.total - y.total;
}

int** kSmallestPairs(int* nums1, int nums1Size, int* nums2, int nums2Size, int k, int* returnSize, int** returnColumnSizes)
{
    int size = 0;
    long len = (long)nums1Size * nums2Size;
    k = k < len ? k : len;
    Node *que = malloc(sizeof(Node) * k * k);
    memset(que, 0, sizeof(Node) * k);

    *returnSize = k;
    *returnColumnSizes = (int *)malloc(sizeof(int) * k);
    int **res = (int**)malloc(sizeof(int*) * k);

    Node temp = {0};
    for (int i = 0; i < k && i < nums1Size; i++) {
        for (int j = 0; j < k && j < nums2Size; j++) {
            if (size < k) {
                temp.num1 = nums1[i];
                temp.num2 = nums2[j];
                temp.total = nums1[i] + nums2[j];
                que[size++] = temp;
            } else {
                if (nums1[i] + nums2[j] < que[size - 1].total) {
                    temp.num1 = nums1[i];
                    temp.num2 = nums2[j];
                    temp.total = nums1[i] + nums2[j];
                    que[size - 1] = temp;
                } else {
                    break;
                }
            }
            qsort(que, size, sizeof(Node), Cmp);
        }
    }

    for (int i = 0; i < k; i++) {
        returnColumnSizes[0][i] = 2;
        res[i] = (int*)malloc(sizeof(int) * 2);
        res[i][0] = que[i].num1;
        res[i][1] = que[i].num2;
    }

    return res;
}
=======================================================
